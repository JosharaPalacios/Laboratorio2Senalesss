import numpy as np
import matplotlib.pyplot as plt
#Punto a)
#Datos Lina
#define h y x
x = np.array([1,0,1,1,0,8,2,1,5,0])   # cédula
h = np.array([5,6,0,0,8,2,2])         # código estudiantil

# Gráfica de h[n]
t = np.arange(len(h))
plt.figure(figsize=(8, 4))
plt.stem(t, h)
plt.xlabel('n')
plt.ylabel('h[n]')
plt.title('h[n] Lina')
plt.grid()
plt.show()

# Gráfica de x[n]
t = np.arange(len(x))
plt.figure(figsize=(8, 4))
plt.stem(t, x)
plt.xlabel('n')
plt.ylabel('x[n]')
plt.title('x[n] Lina')
plt.grid()
plt.show()

# Convolución
y = np.convolve(x, h, mode='full')
print("Señal convolución entre h[n] y x[n], Lina:")
print(y)

# Gráfica de y[n]
t = np.arange(len(y))
plt.figure(figsize=(10, 4))
plt.stem(t, y)
plt.xlabel('n')
plt.ylabel('y[n]')
plt.title('Convolución y[n] = x[n] * h[n]')
plt.grid()
plt.show()

# Datos de Valentina
x = np.array([1,0,2,3,3,7,1,2,5,9])   # cédula
h = np.array([5,6,0,0,8,1,7])         # código estudiantil

# Gráfica de h[n]
t = np.arange(len(h))
plt.figure(figsize=(8, 4))
plt.stem(t, h)
plt.xlabel('n')
plt.ylabel('h[n]')
plt.title('h[n] Valentina')
plt.grid()
plt.show()

# Gráfica de x[n]
t = np.arange(len(x))
plt.figure(figsize=(8, 4))
plt.stem(t, x)
plt.xlabel('n')
plt.ylabel('x[n]')
plt.title('x[n] Valentina')
plt.grid()
plt.show()

# Convolución
y = np.convolve(x, h, mode='full')
print("Señal convolución entre h[n] y x[n], Valentina:")
print(y)

# Gráfica de y[n]
t = np.arange(len(y))
plt.figure(figsize=(10, 4))
plt.stem(t, y)
plt.xlabel('n')
plt.ylabel('y[n]')
plt.title('Convolución y[n] = x[n] * h[n]')
plt.grid()
plt.show()

#Datos de Maria Jose
x = np.array([1,0,1,1,0,8,5,6,7,9])   # cédula
h = np.array([5,6,0,0,8,7,6])         # código estudiantil

# Gráfica de h[n]
t = np.arange(len(h))
plt.figure(figsize=(8, 4))
plt.stem(t, h)
plt.xlabel('n')
plt.ylabel('h [n]')
plt.title('h [n] María José')
plt.grid()
plt.show()

# Gráfica de x[n]
t = np.arange(len(x))
plt.figure(figsize=(8, 4))
plt.stem(t, x)
plt.xlabel('n')
plt.ylabel('x [n]')
plt.title('x [n] María José')
plt.grid()
plt.show()

# Convolución
y = np.convolve(x, h, mode='full')
print("Señal convolución entre h [n] y x [n], María José:")
print(y)

# Gráfica de y[n]
t = np.arange(len(y))
plt.figure(figsize=(10, 4))
plt.stem(t, y)
plt.xlabel('n')
plt.ylabel('y [n]')
plt.title('Convolución y [n] = x [n] * h [n]')
plt.grid()
plt.show()


#Punto b)
Ts = 1.25e-3 #Ts dado por la guía
n = np.arange(9) #para 0<=n<=9
f = 100 #100 nts
x1 = np.cos(2 * np.pi * f * n * Ts) #x1(nTs) = cos(2pi100nts)
x2 = np.sin(2 * np.pi * f * n * Ts) #x2(nTs) = sen(2pi100nts)
correlacion = np.correlate(x1, x2, mode='full')
print ("Correlación cruzado (vector o resultado", correlacion)

#Grafica de correlacion
t_corr = np.arange(-len(n) + 1, len(n))
plt.figure(figsize=(8, 4))
plt.stem(t_corr,correlacion)
plt.xlabel("Desplazamiento")
plt.ylabel("Correlacion")
plt.title("Correlacion cruzada entre x1[n] y x2[n]")
plt.grid()
plt.show()

#Parte c)
from google.colab import drive
import numpy as np
import matplotlib.pyplot as plt

# Montar Google Drive
drive.mount('/content/drive')

# Ruta completa al archivo en tu Drive
ruta = "/content/drive/MyDrive/GITTHUB/extraccion_señal_1.npy"

# Cargar la señal
senal_en_colab = np.load(ruta)

# Parámetros
fs = 4000
duracion = 3
t = np.arange(len(senal_en_colab)) / fs

# Graficar la señal
plt.plot(t, senal_en_colab)
plt.axis([0, duracion, -1, 2.5])
plt.grid()
plt.title(f"Señal Generada")
plt.show()

# Frecuencia de Nyquist
fs = 4000  # frecuencia de muestreo usada
f_nyquist = fs / 2
print(f"Frecuencia de Nyquist = {f_nyquist} Hz")

from scipy.signal import resample

# Nueva frecuencia de muestreo
fs_digital = 4 * f_nyquist   # 8000 Hz

# Duración de la señal
duracion = len(senal_en_colab) / fs

# Número de muestras nuevas
N_new = int(duracion * fs_digital)

# Re-muestreo
senal_digital = resample(senal_en_colab, N_new)

# Vector de tiempo para la señal digital
t_digital = np.arange(N_new) / fs_digital

print(f"Muestras originales: {len(senal_en_colab)}, nuevas: {len(senal_digital)}")

# Estadísticos de la señal digitalizada
media = np.mean(senal_digital)
mediana = np.median(senal_digital)
desviacion = np.std(senal_digital)
maximo = np.max(senal_digital)
minimo = np.min(senal_digital)

print("Características de la señal digitalizada:")
print(f"Media: {media}")
print(f"Mediana: {mediana}")
print(f"Desviación estándar: {desviacion}")
print(f"Máximo: {maximo}")
print(f"Mínimo: {minimo}")

# Comparación
import matplotlib.pyplot as plt

plt.figure(figsize=(12,5))

# Señal original
plt.subplot(1,2,1)
t_original = np.arange(len(senal_en_colab)) / fs
plt.plot(t_original, senal_en_colab)
plt.title("Señal original (fs=4000 Hz)")
plt.xlabel("Tiempo [s]")
plt.ylabel("Amplitud")

# Señal digitalizada
plt.subplot(1,2,2)
plt.plot(t_digital, senal_digital)
plt.title("Señal digitalizada (fs=8000 Hz)")
plt.xlabel("Tiempo [s]")
plt.ylabel("Amplitud")

plt.tight_layout()
plt.show()

#TRANSFORMADA DE FOURIER
from scipy.fft import fft, fftfreq


N = len(senal_digital)
fft_senal = fft(senal_digital)
frecuencias = fftfreq(N, 1/fs_digital)

fft_magnitud = np.abs(fft_senal[:N//2])
frecuencias_pos = frecuencias[:N//2]


plt.figure(figsize=(10,4))
plt.plot(frecuencias_pos, fft_magnitud)
plt.title("Transformada de Fourier de la señal")
plt.xlabel("Frecuencia [Hz]")
plt.ylabel("Magnitud")
plt.grid()
plt.show()

from scipy.signal import welch

frecs, psd = welch(senal_digital, fs=fs_digital, nperseg=1024)

plt.semilogy(frecs, psd)
plt.title("Densidad espectral de potencia")
plt.xlabel("Frecuencia [Hz]")
plt.ylabel("Potencia [V²/Hz]")
plt.grid()
plt.show()

from scipy.signal import welch

frecs, psd = welch(senal_digital, fs=fs_digital, nperseg=1024)

plt.semilogy(frecs, psd)
plt.title("Densidad espectral de potencia")
plt.xlabel("Frecuencia [Hz]")
plt.ylabel("Potencia [V²/Hz]")
plt.grid()
plt.show()

plt.hist(frecuencias_pos, bins=50, weights=fft_magnitud, color="skyblue", edgecolor="black")
plt.title("Histograma de frecuencias")
plt.xlabel("Frecuencia [Hz]")
plt.ylabel("Amplitud acumulada")
plt.show()

